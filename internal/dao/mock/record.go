// Code generated by MockGen. DO NOT EDIT.
// Source: record.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	dao "github.com/everywan/demo-server-go/internal/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockRecordDao is a mock of RecordDao interface.
type MockRecordDao struct {
	ctrl     *gomock.Controller
	recorder *MockRecordDaoMockRecorder
}

// MockRecordDaoMockRecorder is the mock recorder for MockRecordDao.
type MockRecordDaoMockRecorder struct {
	mock *MockRecordDao
}

// NewMockRecordDao creates a new mock instance.
func NewMockRecordDao(ctrl *gomock.Controller) *MockRecordDao {
	mock := &MockRecordDao{ctrl: ctrl}
	mock.recorder = &MockRecordDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordDao) EXPECT() *MockRecordDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordDao) Create(arg0 context.Context, arg1 *dao.CreateRecordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRecordDaoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordDao)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRecordDao) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordDaoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordDao)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRecordDao) Get(ctx context.Context, id uint) (*dao.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*dao.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRecordDaoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecordDao)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockRecordDao) List(arg0 context.Context, arg1 *dao.ListRecordRequest) (*dao.ListRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*dao.ListRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRecordDaoMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRecordDao)(nil).List), arg0, arg1)
}

// Query mocks base method.
func (m *MockRecordDao) Query(arg0 context.Context, arg1 *dao.QueryRecordRequest) (*dao.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*dao.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRecordDaoMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRecordDao)(nil).Query), arg0, arg1)
}

// Update mocks base method.
func (m *MockRecordDao) Update(arg0 context.Context, arg1 *dao.UpdateRecordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecordDaoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordDao)(nil).Update), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockRecordDao) UpdateStatus(arg0 context.Context, arg1 *dao.UpdateRecordStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRecordDaoMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRecordDao)(nil).UpdateStatus), arg0, arg1)
}
